// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.co.roguesystems.thutego.module.outcome;

import bw.co.roguesystems.thutego.curriculum.outcome.ExitLevelOutcomeRepository;
import bw.co.roguesystems.thutego.module.ModuleRepository;
import bw.co.roguesystems.thutego.module.topic.TopicRepository;
import org.springframework.stereotype.Repository;

/**
 * @see LearningOutcome
 */
@Repository("learningOutcomeDao")
public class LearningOutcomeDaoImpl
    extends LearningOutcomeDaoBase
{
    
    public LearningOutcomeDaoImpl(
        ModuleRepository moduleRepository,
        ExitLevelOutcomeRepository exitLevelOutcomeRepository,
        TopicRepository topicRepository,
        LearningOutcomeRepository learningOutcomeRepository
    ) {

        super(
            moduleRepository,
            exitLevelOutcomeRepository,
            topicRepository,
            learningOutcomeRepository
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toLearningOutcomeVO(
        LearningOutcome source,
        LearningOutcomeVO target)
    {
        // TODO verify behavior of toLearningOutcomeVO
        super.toLearningOutcomeVO(source, target);
        // WARNING! No conversion for target.module (can't convert source.getModule():bw.co.roguesystems.thutego.module.Module to bw.co.roguesystems.thutego.module.ModuleListVO
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LearningOutcomeVO toLearningOutcomeVO(final LearningOutcome entity)
    {
        // TODO verify behavior of toLearningOutcomeVO
        return super.toLearningOutcomeVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private LearningOutcome loadLearningOutcomeFromLearningOutcomeVO(LearningOutcomeVO learningOutcomeVO)
    {
        // TODO implement loadLearningOutcomeFromLearningOutcomeVO
        throw new UnsupportedOperationException("bw.co.roguesystems.thutego.module.outcome.loadLearningOutcomeFromLearningOutcomeVO(LearningOutcomeVO) not yet implemented.");

        /* A typical implementation looks like this:
        if (learningOutcomeVO.getId() == null)
        {
            return  LearningOutcome.Factory.newInstance();
        }
        else
        {
            return this.load(learningOutcomeVO.getId());
        }
        */
    }

    /**
     * {@inheritDoc}
     */
    public LearningOutcome learningOutcomeVOToEntity(LearningOutcomeVO learningOutcomeVO)
    {
        // TODO verify behavior of learningOutcomeVOToEntity
        LearningOutcome entity = this.loadLearningOutcomeFromLearningOutcomeVO(learningOutcomeVO);
        this.learningOutcomeVOToEntity(learningOutcomeVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void learningOutcomeVOToEntity(
        LearningOutcomeVO source,
        LearningOutcome target,
        boolean copyIfNull)
    {
        // TODO verify behavior of learningOutcomeVOToEntity
        super.learningOutcomeVOToEntity(source, target, copyIfNull);
    }
}