// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.co.roguesystems.thutego.curriculum;

import bw.co.roguesystems.thutego.curriculum.domain.DomainRepository;
import bw.co.roguesystems.thutego.curriculum.domain.DomainVO;
import bw.co.roguesystems.thutego.curriculum.field.LearningFieldRepository;
import bw.co.roguesystems.thutego.curriculum.field.LearningFieldVO;
import bw.co.roguesystems.thutego.curriculum.level.CurriculumLevelRepository;
import bw.co.roguesystems.thutego.curriculum.level.CurriculumLevelVO;
import bw.co.roguesystems.thutego.curriculum.outcome.ExitLevelOutcomeRepository;
import bw.co.roguesystems.thutego.module.ModuleRepository;
import org.springframework.stereotype.Repository;

/**
 * @see curriculum
 */
@Repository("curriculumDao")
public class CurriculumDaoImpl
        extends CurriculumDaoBase {

    public CurriculumDaoImpl(
            ExitLevelOutcomeRepository exitLevelOutcomeRepository,
            ModuleRepository moduleRepository,
            CurriculumLevelRepository curriculumLevelRepository,
            DomainRepository domainRepository,
            LearningFieldRepository learningFieldRepository,
            CurriculumRepository curriculumRepository) {

        super(exitLevelOutcomeRepository, moduleRepository, curriculumLevelRepository, domainRepository,
                learningFieldRepository, curriculumRepository);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toCurriculumListVO(
        Curriculum source,
            CurriculumListVO target) {
        // TODO verify behavior of toCurriculumListVO
        super.toCurriculumListVO(source, target);
        // WARNING! No conversion for target.level (can't convert
        // source.getLevel():bw.co.roguesystems.thutego.curriculum.level.CurriculumLevel
        // to bw.co.roguesystems.thutego.curriculum.level.CurriculumLevelVO
        if (source.getLevel() != null) {

            CurriculumLevelVO level = new CurriculumLevelVO();
            level.setId(source.getLevel().getId());
            level.setLevel(source.getLevel().getLevel());
            target.setLevel(level);
        }

        if (source.getDomain() != null) {

            target.setDomain(source.getDomain().getName());
        }

        if (source.getLearningField() != null) {
            target.setLearningField(source.getLearningField().getField());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CurriculumListVO toCurriculumListVO(final Curriculum entity) {
        // TODO verify behavior of toCurriculumListVO
        return super.toCurriculumListVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value
     * object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Curriculum loadcurriculumFromCurriculumListVO(CurriculumListVO curriculumListVO) {
        if (curriculumListVO.getId() == null) {
            return Curriculum.Factory.newInstance();
        } else {
            return this.load(curriculumListVO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public Curriculum curriculumListVOToEntity(CurriculumListVO curriculumListVO) {
        // TODO verify behavior of curriculumListVOToEntity
        Curriculum entity = this.loadcurriculumFromCurriculumListVO(curriculumListVO);
        this.curriculumListVOToEntity(curriculumListVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void curriculumListVOToEntity(
            CurriculumListVO source,
            Curriculum target,
            boolean copyIfNull) {
        // TODO verify behavior of curriculumListVOToEntity
        super.curriculumListVOToEntity(source, target, copyIfNull);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toCurriculumVO(
        Curriculum source,
            CurriculumVO target) {
        // TODO verify behavior of toCurriculumVO
        super.toCurriculumVO(source, target);
        // WARNING! No conversion for target.level (can't convert
        // source.getLevel():bw.co.roguesystems.thutego.curriculum.level.CurriculumLevel
        // to bw.co.roguesystems.thutego.curriculum.level.CurriculumLevelVO
        if (source.getLevel() != null) {

            CurriculumLevelVO level = new CurriculumLevelVO();
            level.setId(source.getLevel().getId());
            level.setLevel(source.getLevel().getLevel());
            target.setLevel(level);

        }
        // WARNING! No conversion for target.exitLevelOutcomes (can't convert
        // source.getExitLevelOutcomes():bw.co.roguesystems.thutego.curriculum.outcome.ExitLevelOutcome
        // to bw.co.roguesystems.thutego.curriculum.outcome.ExitLevelOutcomeVO

        if (source.getDomain() != null) {
            DomainVO domain = new DomainVO();
            domain.setId(source.getDomain().getId());
            domain.setCode(source.getDomain().getCode());
            domain.setName(source.getDomain().getName());

            target.setDomain(domain);
        }

        if (source.getLearningField() != null) {
            LearningFieldVO learningField = new LearningFieldVO();
            learningField.setId(source.getLearningField().getId());
            learningField.setCode(source.getLearningField().getCode());
            learningField.setField(source.getLearningField().getField());

            target.setLearningField(learningField);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CurriculumVO toCurriculumVO(final Curriculum entity) {
        // TODO verify behavior of toCurriculumVO
        return super.toCurriculumVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value
     * object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Curriculum loadcurriculumFromCurriculumVO(CurriculumVO curriculumVO) {

        if (curriculumVO.getId() == null) {
            return Curriculum.Factory.newInstance();
        } else {
            return this.load(curriculumVO.getId());
        }

    }

    /**
     * {@inheritDoc}
     */
    public Curriculum curriculumVOToEntity(CurriculumVO curriculumVO) {
        // TODO verify behavior of curriculumVOToEntity
        Curriculum entity = this.loadcurriculumFromCurriculumVO(curriculumVO);
        this.curriculumVOToEntity(curriculumVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void curriculumVOToEntity(
            CurriculumVO source,
            Curriculum target,
            boolean copyIfNull) {
        // TODO verify behavior of curriculumVOToEntity
        super.curriculumVOToEntity(source, target, copyIfNull);
    }
}