// Generated by andromda-angular cartridge (view\components\component.ts.vsl) DO NOT EDIT
import { AfterViewInit, Component, effect, inject, Input, OnDestroy, OnInit, ViewChild } from '@angular/core';
import { COMMA, ENTER } from '@angular/cdk/keycodes';
import {
  FormsModule,
  ReactiveFormsModule,
  FormGroup,
  FormControl,
  FormBuilder,
  Validators,
  FormArray,
} from '@angular/forms';
import { SelectItem } from '@app/utils/select-item';
import { MatTableDataSource } from '@angular/material/table';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatSelectChange } from '@angular/material/select';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { MatChip, MatChipInput, MatChipInputEvent } from '@angular/material/chips';
import { MatAutocompleteSelectedEvent, MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatDialog } from '@angular/material/dialog';
import { Observable, map, of, startWith } from 'rxjs';
import { CommonModule } from '@angular/common';
import { TranslateModule } from '@ngx-translate/core';
import { SharedModule } from '@app/@shared';
import { MaterialModule } from '@app/material.module';
import { CsvModule } from '@ctrl/ngx-csv';
import { CurricullumStatus } from '@app/model/bw/co/roguesystems/thutego/curricullum/curricullum-status';
import { CurriculumLevelVO } from '@app/model/bw/co/roguesystems/thutego/curricullum/level/curriculum-level-vo';
import { SearchObject } from '@app/model/search-object';
import { CurriculumApiStore } from '@app/store/bw/co/roguesystems/thutego/curricullum/curriculum-api.store';
import { CurriculumLevelApiStore } from '@app/store/bw/co/roguesystems/thutego/curricullum/level/curriculum-level-api.store';

@Component({
  selector: 'app-curriculum-editor',
  templateUrl: './curriculum-editor.component.html',
  styleUrls: [],
  standalone: true,
  imports: [CommonModule, FormsModule, ReactiveFormsModule, TranslateModule, SharedModule, MaterialModule, CsvModule],
})
export class CurriculumEditorComponent implements OnInit, OnDestroy, AfterViewInit {
  loading = false;
  separatorKeysCodes: number[] = [ENTER, COMMA];
  @Input() curriculumEditorForm: FormGroup;

  @Input() id?: string;

  @Input() createdBy?: string;

  @Input() updatedBy?: string;

  @Input() createdDate?: Date;

  @Input() updatedDate?: Date;

  @Input() status?: CurricullumStatus;
  statusT: any = CurricullumStatus;
  statusOptions = Object.keys(this.statusT);

  @Input() level?: CurriculumLevelVO;
  levelFilterCtrl: FormControl = new FormControl();

  levelBackingList: SelectItem[] = [];
  levelFilteredList$: Observable<SelectItem[]> = of([]);
  levelChipControl: FormControl = new FormControl([]);
  searchingLevels: boolean = false;

  @Input() name?: string;

  @Input() duration?: number;

  @Input() learningField?: string;

  @Input() rationale?: string;

  @Input() code?: string;

  readonly curriculumStore = inject(CurriculumLevelApiStore);
  readonly levelStore = inject(CurriculumLevelApiStore);

  private formBuilder = inject(FormBuilder);

  constructor() {

    effect(() => {
      let levels = this.levelStore.dataList();

      if(this.searchingLevels) {

        this.levelBackingList = levels.map((level) => {
          return {
            value: level.id,
            label: level.code,
          };
        });

        this.levelFilteredList$ = of(this.levelBackingList);
        this.searchingLevels = false;

      } else if(this.loading) {

        let curriculum = this.curriculumStore.data();

        if(curriculum) {

          this.curriculumEditorForm.patchValue(curriculum);
        }

      }
    });
  }

  ngOnInit() {
    if (!this.curriculumEditorForm) {
      this.initForm();
    }
  }

  ngOnDestroy() {}

  ngAfterViewInit() {}

  initForm() {
    this.curriculumEditorForm = this.formBuilder.group({
      id: [{ value: this.id, disabled: false }],
      createdBy: [{ value: this.createdBy, disabled: false }],
      updatedBy: [{ value: this.updatedBy, disabled: false }],
      createdDate: [{ value: this.createdDate, disabled: false }],
      updatedDate: [{ value: this.updatedDate, disabled: false }],
      status: [{ value: this.status, disabled: false }, [Validators.required]],
      level: this.createCurriculumLevelVOGroup(this.level),
      name: [{ value: this.name, disabled: false }, [Validators.required]],
      duration: [{ value: this.duration, disabled: false }],
      learningField: [{ value: this.learningField, disabled: false }],
      rationale: [{ value: this.rationale, disabled: false }, [Validators.required]],
      code: [{ value: this.code, disabled: false }, [Validators.required]],
    });
  }

  createCurriculumLevelVOGroup(value?: CurriculumLevelVO): FormGroup {
    return this.formBuilder.group({
      id: [value?.id],
      createdBy: [value?.createdBy],
      createdAt: [value?.createdAt],
      modifiedBy: [value?.modifiedBy],
      modifiedAt: [value?.modifiedAt],
      code: [value?.code],
      level: [value?.level],
    });
  }

  createCurriculumLevelVOArray(values?: CurriculumLevelVO[]): FormArray {
    if (values) {
      let formArray: FormArray = this.formBuilder.array([]);
      values?.forEach((value) => formArray.push(this.createCurriculumLevelVOGroup(value)));

      return formArray;
    } else {
      return new FormArray([] as any);
    }
  }

  get idControl(): FormControl {
    return this.curriculumEditorForm?.get('id') as FormControl;
  }

  get createdByControl(): FormControl {
    return this.curriculumEditorForm?.get('createdBy') as FormControl;
  }

  get updatedByControl(): FormControl {
    return this.curriculumEditorForm?.get('updatedBy') as FormControl;
  }

  get createdDateControl(): FormControl {
    return this.curriculumEditorForm?.get('createdDate') as FormControl;
  }

  get updatedDateControl(): FormControl {
    return this.curriculumEditorForm?.get('updatedDate') as FormControl;
  }

  get statusControl(): FormGroup {
    return this.curriculumEditorForm?.get('status') as FormGroup;
  }

  get levelControl(): FormGroup {
    return this.curriculumEditorForm?.get('level') as FormGroup;
  }

  get levelCodeControl(): FormControl {
    return this.levelControl?.get('code') as FormControl;
  }

  get levelLevelControl(): FormControl {
    return this.levelControl?.get('level') as FormControl;
  }

  get nameControl(): FormControl {
    return this.curriculumEditorForm?.get('name') as FormControl;
  }

  get durationControl(): FormControl {
    return this.curriculumEditorForm?.get('duration') as FormControl;
  }

  get learningFieldControl(): FormControl {
    return this.curriculumEditorForm?.get('learningField') as FormControl;
  }

  get rationaleControl(): FormControl {
    return this.curriculumEditorForm?.get('rationale') as FormControl;
  }

  get codeControl(): FormControl {
    return this.curriculumEditorForm?.get('code') as FormControl;
  }

  levelCompare(o1: any, o2: any) {
    return false;
  }

  filterLevel() {
    let search = this.levelFilterCtrl.value;

    if(!search) {
      search = '';
    }

    this.searchingLevels = true;
    this.levelStore.search({criteria: search});
  }
}
