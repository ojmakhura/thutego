// Generated by andromda-angular cartridge (view\components\component.ts.vsl) DO NOT EDIT
import {
  AfterViewInit,
  Component,
  effect,
  inject,
  Input,
  OnDestroy,
  OnInit,
  ViewChild,
} from "@angular/core";
import {COMMA, ENTER} from '@angular/cdk/keycodes';
import {
  FormsModule,
  ReactiveFormsModule,
  FormGroup,
  FormControl,
  FormBuilder,
  Validators,
  FormArray,
} from "@angular/forms";
import { SelectItem } from "@app/utils/select-item";
import { MatSelectChange } from '@angular/material/select';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { MatChip, MatChipInput, MatChipInputEvent } from "@angular/material/chips";
import {MatAutocompleteSelectedEvent, MatAutocompleteModule} from '@angular/material/autocomplete';
import { MatDialog } from '@angular/material/dialog';
import { firstValueFrom, Observable, map, of, startWith } from "rxjs";
import { CommonModule } from '@angular/common';
import { TranslateModule } from '@ngx-translate/core';
import { MaterialModule } from '@app/material.module';
import { CsvModule } from '@ctrl/ngx-csv';
import { AccessPointTypeDTO } from '@app/model/bw/co/roguesystems/thutego/access/type/access-point-type-dto';
import { SearchObject } from '@app/model/search-object';
import { AccessPointSearchComponent } from './access-point-search.component';
import { TableComponent } from '@app/components/table/table.component';
import { AccessPointTypeApiStore } from "@app/store/bw/co/roguesystems/thutego/access/type/access-point-type-api.store";

@Component({
  selector: "app-access-point-search",
  templateUrl: "./access-point-search.component.html",
  styleUrls: [],
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    ReactiveFormsModule,
    TranslateModule,
    MaterialModule,
    CsvModule,
    TableComponent,
  ]
})
export class AccessPointSearchImplComponent extends AccessPointSearchComponent {

  readonly accessPointTypeStore = inject(AccessPointTypeApiStore);
  private accessPointTypes$ = this.accessPointTypeStore.dataList;

  constructor() {
    super();
    effect(() => {
      this.typeBackingList = this.accessPointTypes$();
      this.typeFilteredList$ = of(this.typeBackingList);
    });
  }

  override filterType() {
    this.accessPointTypeStore.search({ criteria: this.typeFilterCtrl.value });
  }

  override typeCompare(o1: AccessPointTypeDTO | any, o2: AccessPointTypeDTO | any) {
    return o1 && o2 ? o1.id === o2.id : false;
  }

}
