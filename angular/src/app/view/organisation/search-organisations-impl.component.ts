// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
import { Component } from '@angular/core';
import { SearchOrganisationsComponent } from '@app/view/organisation/search-organisations.component';
import { SearchOrganisationsVarsForm } from '@app/view/organisation/search-organisations.component';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { CommonModule } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { TranslateModule } from '@ngx-translate/core';
import { MaterialModule } from '@app/material.module';

import { TableComponent } from '@app/components/table/table.component';
import { LoaderComponent } from '@shared/loader/loader.component';
import { OrganisationEditorImplComponent } from '@app/components/organisation/organisation-editor-impl.component';
import { MatPaginator } from '@angular/material/paginator';

@Component({
  selector: 'app-search-organisations',
  templateUrl: './search-organisations.component.html',
  styleUrls: ['./search-organisations.component.scss'],
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    ReactiveFormsModule,
    TranslateModule,
    MaterialModule,

    TableComponent,
    LoaderComponent,
    OrganisationEditorImplComponent,
  ],
})
export class SearchOrganisationsImplComponent extends SearchOrganisationsComponent {
  constructor() {
    super();

    this.organisationApiStore.reset();
    this.success = this.organisationApiStore.success;
    this.loading = this.organisationApiStore.loading;
    this.error = this.organisationApiStore.error;
    this.messages = this.organisationApiStore.messages;
    this.loaderMessage = this.organisationApiStore.loaderMessage;
    this.organisationsTablePaged = false;
    this.organisationsTableSignal = this.organisationApiStore.dataList;
  }

  override beforeOnInit(form: SearchOrganisationsVarsForm): SearchOrganisationsVarsForm {
    return form;
  }

  doNgOnDestroy(): void {}


  override doNgAfterViewInit(): void {
    this.organisationsTable?.tablePaginator?.page?.subscribe({
      next: (paginator: MatPaginator) => {
        this.doSearch();
      },
    });
  }

  override beforeSearchOrganisationsSearch(form: any): void {
    form.criteria = {};

    this.doSearch();
  }

  private doSearch(): void {

    let criteria = this.criteriaControl.value;

    this.organisationApiStore.search({criteria: criteria ? criteria : ''});

    // this.organisationApiStore.search
    // let criteria = new SearchObject<string>();
    // criteria.criteria = {
    //   code: this.codeControl.value,
    //   name: this.nameControl.value,
    //   status: this.statusControl.value,
    // };
    // criteria.pageNumber = pageNumber;
    // criteria.pageSize = pageSize;

    // this.organisationApiStore.pagedSearch({ criteria: criteria });
  }
}
